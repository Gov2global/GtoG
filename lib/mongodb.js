// import mongoose from "mongoose";

// const connectMongoDB = async () => {
//   if (mongoose.connection.readyState >= 1) {
//     return;
//   }
//   await mongoose.connect(process.env.MONGODB_URI, {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//   });
// };

// export { connectMongoDB };


// import mongoose from 'mongoose';

// const MONGODB_URI = process.env.MONGODB_URI;
// if (!MONGODB_URI) throw new Error('Missing MONGODB_URI');

// let cached = global._mongoose;
// if (!cached) cached = global._mongoose = { conn: null, promise: null };

// export async function connectDB() {
//   if (cached.conn) return cached.conn;

//   if (!cached.promise) {
//     mongoose.set('strictQuery', true);
//     cached.promise = mongoose.connect(MONGODB_URI, {
//       bufferCommands: false
//     }).then((m) => m);
//   }

//   cached.conn = await cached.promise;
//   return cached.conn;
// }




// import mongoose from "mongoose";

// const MONGODB_URI = process.env.MONGODB_URI;
// if (!MONGODB_URI) throw new Error("Missing MONGODB_URI");

// // cache ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏ß‡πâ‡∏ö‡∏ô global ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô dev/serverless
// let cached = global._mongoose;
// if (!cached) cached = global._mongoose = { conn: null, promise: null };

// async function _connect() {
//   if (cached.conn) return cached.conn;

//   if (!cached.promise) {
//     // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà useNewUrlParser/useUnifiedTopology ‡πÉ‡∏ô Mongoose >= v6
//     mongoose.set("strictQuery", true);
//     cached.promise = mongoose
//       .connect(MONGODB_URI, { bufferCommands: false, serverSelectionTimeoutMS: 10000, maxPoolSize: 5 })
//       .then((m) => m);
//   }
//   cached.conn = await cached.promise;
//   return cached.conn;
// }

// // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô connectDB
// export async function connectDB() {
//   return _connect();
// }

// // ‚úÖ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà import { connectMongoDB } ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
// export const connectMongoDB = connectDB;

// // (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö default import ‡∏î‡πâ‡∏ß‡∏¢
// export default connectDB;


import mongoose from "mongoose";

const MONGODB_URI = process.env.MONGODB_URI;
if (!MONGODB_URI) throw new Error("‚ùå Missing MONGODB_URI");

let cached = globalThis._mongooseCached;
if (!cached) {
  cached = globalThis._mongooseCached = { conn: null, promise: null };
}

export async function connectMongoDB() {
  // üîç debug state
  console.log("üîç [mongo] state:", mongoose.connection.readyState);
  // 0 = disconnected, 1 = connected, 2 = connecting, 3 = disconnecting

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
  if (cached.conn && mongoose.connection.readyState === 1) {
    return cached.conn;
  }

  // ‡∏ñ‡πâ‡∏≤ connection ‡∏Ñ‡πâ‡∏≤‡∏á (2 = connecting, 3 = disconnecting) ‚Üí disconnect ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
  if (mongoose.connection.readyState !== 0) {
    console.log("‚ö†Ô∏è [mongo] resetting stale connection...");
    await mongoose.disconnect();
  }

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ promise ‡∏ó‡∏µ‡πà fail ‚Üí ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
  cached.conn = null;
  cached.promise = null;

  // connect ‡πÉ‡∏´‡∏°‡πà
  cached.promise = mongoose
    .connect(MONGODB_URI, {
      maxPoolSize: 20,          // serverless friendly
      minPoolSize: 0,
      maxIdleTimeMS: 120_000,
      socketTimeoutMS: 30_000,
      serverSelectionTimeoutMS: 20_000,
      bufferCommands: false,
    })
    .then((m) => {
      console.log("‚úÖ [mongo] connected:", m.connection.host);
      cached.conn = m;
      return m;
    })
    .catch((err) => {
      console.error("‚ùå [mongo] connect error:", err);
      cached.promise = null;
      throw err;
    });

  cached.conn = await cached.promise;
  return cached.conn;
}

export default connectMongoDB;
