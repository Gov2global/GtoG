
// app/api/baac/route.js
import { NextResponse } from "next/server";
import { connectMongoDB } from "../../../../lib/mongodb";
import Baac from "../../../../models/baac";

function pad(num, size) {
  return num.toString().padStart(size, "0");
}

export async function POST(req) {
  try {
    await connectMongoDB();
    const body = await req.json();

    // ‚úÖ gen baac_ID (YYMMDD + running 4 digit)
    const now = new Date();
    const yy = now.getFullYear().toString().slice(-2);
    const mm = pad(now.getMonth() + 1, 2);
    const dd = pad(now.getDate(), 2);
    const prefix = `${yy}${mm}${dd}`;

    const lastEntry = await Baac.findOne({ baac_ID: new RegExp(`^${prefix}`) })
      .sort({ baac_ID: -1 })
      .lean();

    let seq = 1;
    if (lastEntry) {
      const lastSeq = parseInt(lastEntry.baac_ID.slice(-4), 10);
      seq = lastSeq + 1;
    }

    const baac_ID = `${prefix}${pad(seq, 4)}`;

    // ‚úÖ ensure dob is Date
    if (body.dob) {
      body.dob = new Date(body.dob);
    }

    // ‚úÖ Save to MongoDB
    const newBaac = await Baac.create({ ...body, baac_ID });
    console.log("üíæ Saved BAAC:", newBaac._id);

    // ‚úÖ Push LINE message (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ regLineID ‡∏à‡∏∞ fail ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
    if (!body.regLineID) {
      return NextResponse.json(
        { success: false, error: "regLineID is required" },
        { status: 400 }
      );
    }

    const payload = {
      to: body.regLineID,
      messages: [
        {
          type: "text",
          text: `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡∏£‡∏´‡∏±‡∏™: ${baac_ID}\n‡∏ä‡∏∑‡πà‡∏≠: ${body.firstName} ${body.lastName}\n‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${body.phone}\n\n‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö üôè`,
        },
      ],
    };

    console.log("üì¶ LINE payload:", payload);

    const resLine = await fetch("https://api.line.me/v2/bot/message/push", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
      },
      body: JSON.stringify(payload),
    });

    const text = await resLine.text();
    console.log("üì® LINE API status:", resLine.status);
    console.log("üì® LINE API response:", text);

    // ‚ùå ‡∏ñ‡πâ‡∏≤ push LINE fail ‚Üí ‡∏™‡πà‡∏á error ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (!resLine.ok) {
      return NextResponse.json(
        {
          success: false,
          error: "LINE push failed",
          line: { status: resLine.status, response: text },
        },
        { status: 500 }
      );
    }

    // ‚úÖ ‡∏ó‡∏±‡πâ‡∏á DB ‡πÅ‡∏•‡∏∞ LINE OK
    return NextResponse.json(
      {
        success: true,
        data: newBaac,
        line: { status: resLine.status, response: text },
      },
      { status: 201 }
    );
  } catch (err) {
    console.error("‚ùå Error saving BAAC:", err);
    return NextResponse.json(
      { success: false, error: err.message },
      { status: 500 }
    );
  }
}