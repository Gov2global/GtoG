// api/farmer/get/typeFarm
import mongoose from "mongoose";
import connectMongoDB from "../../../../../../lib/mongodb";
import TypeFarm from "../../../../../../models/typeFarm";
import { NextResponse } from "next/server";
import { getCache, setCache } from "../../../../../../lib/cache";

// TTL = 10 ‡∏ô‡∏≤‡∏ó‡∏µ
const CACHE_KEY = "typeFarmList";
const CACHE_TTL = 10 * 60 * 1000;

export async function GET() {
  try {
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å cache ‡∏Å‡πà‡∏≠‡∏ô
    const cached = getCache(CACHE_KEY);
    if (cached) {
      console.log("‚ö° ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache");
      return NextResponse.json({ success: true, data: cached, cached: true });
    }

    // ‚úÖ ensure connect
    await connectMongoDB();
    console.log("üîç MongoDB state:", mongoose.connection.readyState);

    const typeFarmList = await TypeFarm.find().sort({ typeID: 1 }).lean();

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á cache
    setCache(CACHE_KEY, typeFarmList, CACHE_TTL);

    console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å DB ‡πÅ‡∏•‡∏∞ cache ‡πÉ‡∏´‡∏°‡πà");
    return NextResponse.json({ success: true, data: typeFarmList, cached: false });
  } catch (err) {
    console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• typeID ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);

    // üîπ fallback: ‡πÉ‡∏ä‡πâ cache ‡πÄ‡∏Å‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const fallback = getCache(CACHE_KEY);
    if (fallback) {
      console.warn("‚ö†Ô∏è DB error ‚Üí ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏ó‡∏ô");
      return NextResponse.json({ success: true, data: fallback, cached: true, fallback: true });
    }

    return NextResponse.json(
      { success: false, message: err.message },
      { status: 500 }
    );
  }
}
