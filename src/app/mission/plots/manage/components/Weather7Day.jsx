"use client"

import { useEffect, useState } from "react"

// mapping weathercode ‚Üí icon / text
function weatherCodeToIconText(code) {
  const map = {
    0: { icon: "‚òÄÔ∏è", text: "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™" },
    1: { icon: "üå§Ô∏è", text: "‡∏ü‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πà‡∏á" },
    2: { icon: "‚õÖ", text: "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô" },
    3: { icon: "‚òÅÔ∏è", text: "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å" },
    45: { icon: "üå´Ô∏è", text: "‡∏´‡∏°‡∏≠‡∏Å" },
    48: { icon: "üå´Ô∏è", text: "‡∏´‡∏°‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á" },
    51: { icon: "üåßÔ∏è", text: "‡∏ù‡∏ô‡∏õ‡∏£‡∏≠‡∏¢" },
    53: { icon: "üåßÔ∏è", text: "‡∏ù‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" },
    55: { icon: "üåßÔ∏è", text: "‡∏ù‡∏ô‡∏´‡∏ô‡∏±‡∏Å" },
    61: { icon: "üå¶Ô∏è", text: "‡∏ù‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢" },
    63: { icon: "üå¶Ô∏è", text: "‡∏ù‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" },
    65: { icon: "üåßÔ∏è", text: "‡∏ù‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å" },
    80: { icon: "üåßÔ∏è", text: "‡∏ù‡∏ô‡πÇ‡∏õ‡∏£‡∏¢" },
    81: { icon: "üåßÔ∏è", text: "‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å" },
    95: { icon: "‚õàÔ∏è", text: "‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á" },
    96: { icon: "‚õàÔ∏è", text: "‡∏û‡∏≤‡∏¢‡∏∏‡∏•‡∏π‡∏Å‡πÄ‡∏´‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å" },
    99: { icon: "‚õàÔ∏è", text: "‡∏û‡∏≤‡∏¢‡∏∏‡∏•‡∏π‡∏Å‡πÄ‡∏´‡πá‡∏ö‡πÉ‡∏´‡∏ç‡πà" },
  }
  return map[code] || { icon: "‚ùì", text: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö" }
}

export default function Weather7Day({ lat, lon }) {
  const [current, setCurrent] = useState(null)
  const [daily, setDaily] = useState(null)
  const [error, setError] = useState(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    async function fetchWeather() {
      try {
        const url = `https://api.open-meteo.com/v1/forecast?latitude=${parseFloat(lat)}&longitude=${parseFloat(lon)}&timezone=Asia/Bangkok&daily=temperature_2m_max,temperature_2m_min,weathercode,precipitation_probability_mean&current_weather=true`
        const res = await fetch(url)
        if (!res.ok) {
          throw new Error(`Open-Meteo API error ${res.status}`)
        }
        const json = await res.json()
        setCurrent(json.current_weather)
        setDaily(json.daily)
      } catch (err) {
        setError(err.message)
      } finally {
        setLoading(false)
      }
    }

    if (lat && lon) fetchWeather()
    else {
      setLoading(false)
      setError("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î lat/lon")
    }
  }, [lat, lon])

  if (loading) return <p className="text-center mt-4">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®...</p>
  if (error) return <p className="text-red-500 text-center mt-4">‚ùå {error}</p>
  if (!current || !daily) return <p className="text-center mt-4">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®</p>

  return (
    <div className="mt-6">
      {/* ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
      <div className="bg-white rounded-lg p-3 shadow mb-3 flex justify-between items-center text-sm">
        <div>
          <div className="flex items-center gap-2">
            <span className="text-xl">{weatherCodeToIconText(current.weathercode).icon}</span>
            <span className="text-lg font-bold">{current.temperature}¬∞C</span>
          </div>
          <div className="text-gray-600">‡∏•‡∏°: {current.windspeed_10m} m/s</div>
        </div>
        <div className="text-gray-500 text-xs">‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</div>
      </div>

      {/* ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô 7 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ */}
      <div className="overflow-x-auto">
        <div className="flex gap-2 min-w-max">
          {daily.time.map((dateStr, idx) => {
            const iconText = weatherCodeToIconText(daily.weathercode[idx])
            return (
              <div
                key={dateStr}
                className="bg-white rounded-lg shadow p-2 w-32 text-center flex-shrink-0 text-xs"
              >
                <div className="font-medium text-sm">
                  {new Date(dateStr).toLocaleDateString("th-TH", {
                    weekday: "short",
                    day: "numeric",
                    month: "short",
                  })}
                </div>
                <div className="text-base font-bold mt-1">
                  {daily.temperature_2m_max[idx].toFixed(0)}¬∞ / {daily.temperature_2m_min[idx].toFixed(0)}¬∞
                </div>
                <div className="text-blue-500 mt-1">
                  üíß {daily.precipitation_probability_mean[idx]}%
                </div>
                <div className="text-gray-600 mt-1">
                  {iconText.icon} {iconText.text}
                </div>
              </div>
            )
          })}
        </div>
      </div>
    </div>
  )
}
