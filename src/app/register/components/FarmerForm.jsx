"use client";
import React, { useState, useEffect } from "react";
import ModernInput from "./ui/Input";
import ModernSelect from "./ui/Select";
import { GiFarmTractor } from "react-icons/gi";
import { DiCoda } from "react-icons/di";

function FarmerFormPage() {
  const [formData, setFormData] = useState({
    regName: "",
    regSurname: "",
    regTel: "",
    regLineID: "",
    regPlant: "",
    regPlantOther: "",
    regPlantSpecies: "",
    regPlantAmount: "",
    regPlantAge: "",
    province: "",
    district: "",
    sub_district: "",
    addressDetail: "",
  });

  const [plantOptions, setPlantOptions] = useState([]);
  const [provinces, setProvinces] = useState([]);
  const [districts, setDistricts] = useState([]);
  const [subDistricts, setSubDistricts] = useState([]);
  const [postcode, setPostcode] = useState("");

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
  useEffect(() => {
    const fetchProvinces = async () => {
      try {
        const res = await fetch("/api/farmer/get/province");
        const json = await res.json();
        if (json.success) setProvinces(json.data);
      } catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      }
    };
    fetchProvinces();
  }, []);

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä
  useEffect(() => {
    const fetchPlants = async () => {
      try {
        const res = await fetch("/api/farmer/get/plant");
        const json = await res.json();
        if (json.success) {
          const formatted = json.data.map((item) => ({
            value: item.plantID,
            label: item.plantNameTH,
          }));
          formatted.push({ value: "other", label: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏)" });
          setPlantOptions(formatted);
        }
      } catch (error) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏∑‡∏ä‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
      }
    };
    fetchPlants();
  }, []);

  const handleChange = (field) => (value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const handleProvinceChange = (value) => {
    handleChange("province")(value);
    const filteredDistricts = provinces
      .filter((item) => item.province === value)
      .map((item) => item.district)
      .filter((v, i, a) => a.indexOf(v) === i);
    setDistricts(filteredDistricts);
    setSubDistricts([]);
    setPostcode("");
    setFormData((prev) => ({
      ...prev,
      district: "",
      sub_district: "",
    }));
  };

  const handleDistrictChange = (value) => {
    handleChange("district")(value);
    const filteredSub = provinces
      .filter(
        (item) =>
          item.province === formData.province && item.district === value
      )
      .map((item) => item.sub_district);
    setSubDistricts(filteredSub);
    setPostcode("");
    setFormData((prev) => ({
      ...prev,
      sub_district: "",
    }));
  };

  const handleSubDistrictChange = (value) => {
    handleChange("sub_district")(value);
    const found = provinces.find(
      (item) =>
        item.province === formData.province &&
        item.district === formData.district &&
        item.sub_district === value
    );
    setPostcode(found?.postcode?.toString() || "");
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", {
      ...formData,
      postcode,
    });
  };

  const selectedLabel =
    plantOptions.find((opt) => opt.value === formData.regPlant)?.label || "";

  const cleanLabel =
    formData.regPlant === "other"
      ? formData.regPlantOther || "‡∏û‡∏∑‡∏ä‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
      : selectedLabel.replace(" (‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏)", "");

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-tr from-yellow-100 via-white to-yellow-200 p-4">
      <div className="w-full max-w-lg bg-white shadow-2xl rounded-3xl px-8 py-10">
        <h2 className="text-3xl font-extrabold text-center text-amber-800 mb-8 tracking-tight flex items-center justify-center gap-3 hover:text-amber-900 transition">
          <GiFarmTractor size={45} className="animate-bounce-slow" />
          ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
        </h2>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• */}
          <ModernInput label="‡∏ä‡∏∑‡πà‡∏≠" value={formData.regName} onChange={handleChange("regName")} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠" ringColor="amber" />
          <ModernInput label="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" value={formData.regSurname} onChange={handleChange("regSurname")} placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" ringColor="amber" />
          <ModernInput label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" value={formData.regTel} onChange={handleChange("regTel")} placeholder="08xxxxxxxx" type="tel" ringColor="amber" />
          <ModernInput label="LINE ID" value={formData.regLineID} onChange={handleChange("regLineID")} placeholder="LINE ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" ringColor="amber" />

          {/* ‡∏û‡∏∑‡∏ä */}
          <ModernSelect label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å" value={formData.regPlant} onChange={handleChange("regPlant")} options={plantOptions} ringColor="amber" />
          {formData.regPlant === "other" && (
            <ModernInput label="‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏∑‡∏ä‡∏≠‡∏∑‡πà‡∏ô‡πÜ" value={formData.regPlantOther} onChange={handleChange("regPlantOther")} placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏•‡πâ‡∏ß‡∏¢ ‡∏°‡∏±‡∏á‡∏Ñ‡∏∏‡∏î" ringColor="amber" />
          )}
          {formData.regPlant && (
            <>
              <ModernInput label={`‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡∏≠‡∏á "${cleanLabel}" ‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏õ‡∏•‡∏π‡∏Å`} value={formData.regPlantSpecies} onChange={handleChange("regPlantSpecies")} placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏∏‡∏ß‡∏£‡∏£‡∏ì 1 ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ringColor="amber" />
              <ModernInput label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å" value={formData.regPlantAmount} onChange={handleChange("regPlantAmount")} placeholder="‡πÄ‡∏ä‡πà‡∏ô 100 ‡∏ï‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ 3 ‡πÑ‡∏£‡πà" ringColor="amber" />
              <ModernInput label="‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡∏ä" value={formData.regPlantAge} onChange={handleChange("regPlantAge")} placeholder="‡πÄ‡∏ä‡πà‡∏ô 2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡∏õ‡∏µ" ringColor="amber" />
              {/* ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‚Üí ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ‚Üí ‡∏ï‡∏≥‡∏ö‡∏• ‚Üí ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå + ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
          <ModernSelect label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î" value={formData.province} onChange={handleProvinceChange} options={[...new Set(provinces.map((p) => p.province))].map((p) => ({ value: p, label: p }))} ringColor="amber" />
          
          {formData.province && (
            <ModernSelect label="‡∏≠‡∏≥‡πÄ‡∏†‡∏≠" value={formData.district} onChange={handleDistrictChange} options={districts.map((d) => ({ value: d, label: d }))} ringColor="amber" />
          )}
          
          {formData.district && (
            <ModernSelect label="‡∏ï‡∏≥‡∏ö‡∏•" value={formData.sub_district} onChange={handleSubDistrictChange} options={subDistricts.map((s) => ({ value: s, label: s }))} ringColor="amber" />
          )}

          {formData.sub_district && (
            <>
              <ModernInput label="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå" value={postcode} onChange={(val) => setPostcode(val)} placeholder="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå" ringColor="amber" />
              <ModernInput label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà/‡∏´‡∏°‡∏π‡πà)" value={formData.addressDetail} onChange={handleChange("addressDetail")} placeholder="‡πÄ‡∏ä‡πà‡∏ô 123 ‡∏´‡∏°‡∏π‡πà 4 ‡∏ö‡πâ‡∏≤‡∏ô‡πÇ‡∏û‡∏ô" ringColor="amber" />
            </>
          )}
            </>
          )}

          

          <button type="submit" className="w-full flex items-center justify-center gap-2 bg-gradient-to-r from-amber-700 to-yellow-600 text-white py-3 rounded-full font-semibold hover:from-amber-800 hover:to-yellow-700 shadow-lg transition-all duration-300">
            <DiCoda size={22} className="opacity-90" />
            ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
          </button>
        </form>
      </div>
    </div>
  );
}

export default FarmerFormPage;
