"use client";
import React, { useState, useEffect, useRef } from "react";
import ModernInput from "./ui/Input";
import { ModernSelect, ModernCreatableSelect } from "./ui/Select";
import { GiFarmTractor } from "react-icons/gi";
import { DiCoda } from "react-icons/di";
import LoadingOverlay from "./LoadingOverlat";
import liff from "@line/liff";

// ‚úÖ ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏û‡∏∑‡∏ä hardcode
const plantVarieties = {
  durian: ["‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏´‡∏°‡∏≠‡∏ô‡∏ó‡∏≠‡∏á", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏ä‡∏∞‡∏ô‡∏µ", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Å‡πâ‡∏≤‡∏ô‡∏¢‡∏≤‡∏ß", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Å‡∏£‡∏∞‡∏î‡∏∏‡∏°‡∏ó‡∏≠‡∏á", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏´‡∏•‡∏á‡∏•‡∏±‡∏ö‡πÅ‡∏•", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏´‡∏•‡∏¥‡∏ô‡∏•‡∏±‡∏ö‡πÅ‡∏•"],
  longan: ["‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡∏µ‡∏î‡∏≠", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏û‡∏ß‡∏á‡∏ó‡∏≠‡∏á"],
  tangerine: ["‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏™‡∏µ‡∏ó‡∏≠‡∏á", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏°", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà"],
  pomelo: ["‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡∏≤‡∏ß‡∏ô‡πâ‡∏≥‡∏ú‡∏∂‡πâ‡∏á", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏ó‡∏≠‡∏á‡∏î‡∏µ", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡∏≤‡∏ß‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤", "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏ó‡∏±‡∏ö‡∏ó‡∏¥‡∏°‡∏™‡∏¢‡∏≤‡∏°"],
};
const plantLabelMap = {
  "‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô": "durian",
  "‡∏•‡∏≥‡πÑ‡∏¢": "longan",
  "‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô": "tangerine",
  "‡∏™‡πâ‡∏°‡πÇ‡∏≠": "pomelo",
};

function FarmerFormPage({ selectedType, selectedSubType, regLineID, regProfile }) {
  const [formData, setFormData] = useState({
    regName: "",
    regProfile: "",
    regSurname: "",
    regTel: "",
    regPlant: "",
    regPlantOther: "",
    regPlantSpecies: [],
    regPlantAmount: "",
    regPlantAge: "",
    areaRai: "",
    areaNgan: "",
    areaWa: "",
    province: "",
    district: "",
    sub_district: "",
    addressDetail: "",
    regType: "",
    regSubType: "",
  });
  const [plantOptions, setPlantOptions] = useState([]);
  const [provinces, setProvinces] = useState([]);
  const [districts, setDistricts] = useState([]);
  const [subDistricts, setSubDistricts] = useState([]);
  const [postcode, setPostcode] = useState("");
  const [showLoading, setShowLoading] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const [successMsg, setSuccessMsg] = useState("");
  const isSubmitting = useRef(false);

  // ‚úÖ autofill regProfile / regType / regSubType
  useEffect(() => {
    setFormData((prev) => ({ ...prev, regProfile: regProfile || prev.regProfile }));
  }, [regProfile]);
  useEffect(() => {
    setFormData((prev) => ({
      ...prev,
      regType: selectedType || "",
      regSubType: selectedSubType || "",
    }));
  }, [selectedType, selectedSubType]);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
  useEffect(() => {
    fetch("/api/farmer/get/province")
      .then((res) => res.json())
      .then((json) => json.success && setProvinces(json.data))
      .catch((err) => console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err));
  }, []);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏∑‡∏ä
  useEffect(() => {
    fetch("/api/farmer/get/plant")
      .then((res) => res.json())
      .then((json) => {
        if (json.success) {
          const formatted = json.data.map((item) => ({
            value: item.plantID,
            label: item.plantNameTH,
          }));
          formatted.push({ value: "other", label: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏)" });
          setPlantOptions(formatted);
        }
      })
      .catch((err) => console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏∑‡∏ä‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err));
  }, []);

  // ‚úÖ handleChange generic function
  const handleChange = (field) => (valueOrEvent) => {
    const value = valueOrEvent?.target ? valueOrEvent.target.value : valueOrEvent;
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  // ‚úÖ Province/District/Sub-district
  const handleProvinceChange = (val) => {
    setFormData((prev) => ({ ...prev, province: val, district: "", sub_district: "" }));
    setDistricts([]);
    setSubDistricts([]);
    setPostcode("");
    fetch(`/api/farmer/get/district?province=${val}`)
      .then((res) => res.json())
      .then((json) => json.success && setDistricts(json.data))
      .catch((err) => console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err));
  };

  const handleDistrictChange = (val) => {
    setFormData((prev) => ({ ...prev, district: val, sub_district: "" }));
    setSubDistricts([]);
    setPostcode("");
    fetch(`/api/farmer/get/subdistrict?district=${val}`)
      .then((res) => res.json())
      .then((json) => json.success && setSubDistricts(json.data))
      .catch((err) => console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≥‡∏ö‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err));
  };

  const handleSubDistrictChange = (val) => {
    setFormData((prev) => ({ ...prev, sub_district: val }));
    fetch(`/api/farmer/get/postcode?sub_district=${val}`)
      .then((res) => res.json())
      .then((json) => json.success && setPostcode(json.data))
      .catch((err) => console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err));
  };

  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (sqm)
  const calculateTotalAreaSqm = () => {
    const rai = parseFloat(formData.areaRai || 0) * 1600;
    const ngan = parseFloat(formData.areaNgan || 0) * 400;
    const wa = parseFloat(formData.areaWa || 0) * 4;
    return rai + ngan + wa;
  };

  // ‚úÖ validate ‡∏ü‡∏≠‡∏£‡πå‡∏° (‡πÉ‡∏™‡πà‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
  const validate = () => {
    if (!formData.regName) return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠";
    if (!formData.regTel) return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£";
    if (!formData.regPlant) return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å";
    return null;
  };

  // ‚úÖ handleSubmit (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô)
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isSubmitting.current) return;
    setErrorMsg("");
    setSuccessMsg("");

    const validateMsg = validate();
    if (validateMsg) {
      setErrorMsg(validateMsg);
      return;
    }

    setShowLoading(true);
    isSubmitting.current = true;

    try {
      const idRes = await fetch(`/api/farmer/gen-id?regType=${formData.regType}`);
      const idJson = await idRes.json();
      if (!idJson.success) throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡πÑ‡∏î‡πâ");

      const payload = {
        ...formData,
        regID: idJson.regID,
        regPlantSpecies: formData.regPlantSpecies.filter(Boolean),
        postcode,
        totalAreaSqm: calculateTotalAreaSqm(),
        regLineID: regLineID,
      };

      const submitRes = await fetch("/api/farmer/submit/farmer", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const submitJson = await submitRes.json();
      if (!submitJson.success) throw new Error(submitJson.message || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");

      await fetch("/api/farmer/line/set-richmenu", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ regLineID }),
      });

      setSuccessMsg("‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      setFormData((prev) => ({ ...prev, regName: "", regSurname: "", regTel: "" }));
      setTimeout(() => {
        setShowLoading(false);
        if (window?.liff) window.liff.closeWindow();
      }, 800);
    } catch (err) {
      setErrorMsg("‚ùå " + (err.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"));
      setShowLoading(false);
    } finally {
      isSubmitting.current = false;
    }
  };

  // üìù ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà logic mapping regPlant ‚Üí plantVarieties ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ (mappedKey, safeOptions ‡∏Ø‡∏•‡∏Ø)
  // ‡πÅ‡∏ï‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ handleChange ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-tr from-yellow-100 via-white to-yellow-200 p-4">
      <div className="w-full max-w-lg bg-white shadow-2xl rounded-3xl px-8 py-10">
        <h2 className="text-3xl font-extrabold text-center text-amber-800 mb-8 flex items-center justify-center gap-3">
          <GiFarmTractor size={45} className="animate-bounce-slow" /> ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
        </h2>

        {errorMsg && <div className="mb-4 text-red-700 bg-red-100 px-4 py-2 rounded-lg">{errorMsg}</div>}
        {successMsg && <div className="mb-4 text-green-700 bg-green-100 px-4 py-2 rounded-lg">{successMsg}</div>}

        <form onSubmit={handleSubmit} className="space-y-6">
          <ModernInput label="‡∏ä‡∏∑‡πà‡∏≠" value={formData.regName} onChange={handleChange("regName")} />
          <ModernInput label="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" value={formData.regSurname} onChange={handleChange("regSurname")} />
          <ModernInput label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" value={formData.regTel} onChange={handleChange("regTel")} />
          <ModernSelect label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å" value={formData.regPlant} onChange={handleChange("regPlant")} options={plantOptions} />
          {/* ... ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏∏‡∏ì */}
          <button type="submit" disabled={showLoading} className="w-full bg-amber-700 text-white py-3 rounded-full">
            <DiCoda size={22} /> ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
          </button>
        </form>
      </div>
      {showLoading && <LoadingOverlay />}
    </div>
  );
}

export default FarmerFormPage;
